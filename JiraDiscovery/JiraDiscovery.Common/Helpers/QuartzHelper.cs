using Quartz;
using System.Reflection;
using static JiraDiscovery.Common.Extensions.AssemblyExtensions;
using JiraDiscovery.Common.Attributes;
using static JiraDiscovery.Common.Constants.JobConstants;
using JiraDiscovery.Common.Configuration;

namespace JiraDiscovery.Common.Helpers
{
    public static class QuartzHelper
    {
        public static void AddQuartzJobsWithTriggers(this IServiceCollectionQuartzConfigurator configurator)
        {
            var assembly = AppDomain.CurrentDomain.GetSchedulerAssembly();

            var jobsConfig = assembly.GetTypes()
                .Where(t => t.IsDefined(typeof(QuartzJobAttribute), false))
                .Where(t => !t.GetCustomAttribute<QuartzJobAttribute>()!.QuartzJobConfig.IsDisabled)
                .Select(t => new KeyValuePair<Type, QuartzJobConfig>(t, t.GetCustomAttribute<QuartzJobAttribute>()!.QuartzJobConfig));

            foreach (var jobConfig in jobsConfig)
            {
                AddQuartzJobWithTrigger(configurator, jobConfig);
            }
        }

        private static void AddQuartzJobWithTrigger(IServiceCollectionQuartzConfigurator configurator, KeyValuePair<Type, QuartzJobConfig> jobConfig)
        {
            var jobName = jobConfig.Value.JobKey + AutoGeneratedQuartzJobSuffixValue;

            var triggerName = jobConfig.Value.JobKey + AutoGeneratedQuartzTriggerSuffixValue;

            configurator.AddJob(jobConfig.Key, JobKey.Create(jobName));

            configurator.AddTrigger(GetTrigger(jobName, triggerName, jobConfig.Value));
        }

        private static Action<ITriggerConfigurator> GetTrigger(string jobName, string triggerName, QuartzJobConfig jobConfig)
        {
            return (ITriggerConfigurator c) =>
            {
                c.WithIdentity(triggerName)
                .ForJob(jobName)
                .WithCronSchedule(jobConfig.CronExp);
            };
        }
    }
}
